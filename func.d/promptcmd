#
# called by bash via $PROMPT_COMMAND after a command completes
#
# - expects return value of previous command as sole argument
# - logged timestamps will reflect command completion, not start
#
##############################################################################

prompt_command ()
{
	local histnum time_t command file tmuxpid
	local start_timefmt now_timefmt
	local start_time_t start_time_t
	local duration_secs

	# was getting "bash: echo: write error: Interrupted system call"
	# in the middle of this function because it's run while the
	# terminal window is spawning and they both race to finish, so
	# sometimes the WINCH can be sent right in the middle of our
	# execution and apparently bash does not try to finish the 'echo'
	# after it was interrupted
	#
	# UPDATE: fixed upstream in 5.0, see d233b485e and
	# https://lists.gnu.org/archive/html/bug-bash/2018-01/msg00032.html
	#
	if ((BASH50 == 0)) && ! [[ $dowinch ]]
	then
		dowinch=0
		trap dowinch=1 WINCH
	fi

	# read in last command from in-memory history, for saving on-disk
	# note: must use raw read (with '-r') or '\n' etc will log as 'n'
	# note: $HISTCMD cannot be used to keep track of cancels/dupes
	#   (we keep $histnum instead) because it's not available in the
	#   PROMPT_COMMAND function (it's always set to 1) so we get a
	#   count from the loaded history list, the next one should
	#   increment it
	#
	# TODO: consider also PS0='$(my_precmd)' but this seems less
	# useful because we can't do anything interesting only via side
	# effects, if it has non-empty output that gets printed before
	# the prompt.  this might be good if we want to do a second sqlite3
	# insert at the beginning as a separate row before and after the
	# command, but better would be to export the command start time
	# in some variable in bash and keep a single insert at the
	# prompt issuance.  better still would be to have the sqlite
	# connection stay persistent by using a loadable builtin then we
	# don't need to fork/exec sqlite3 at all
	#
	# TODO: consider also using ${...@P} transformation
	#   $ datevar="\\D{$HISTTIMEFORMAT}"
	#   $ echo ${datevar@P}
	#  20250310221645
	#
	#   $ ttyvar=\\l
	#   $ echo ${thisvar@P}; tty
	#  90
	#  /dev/pts/90
	#
	#   $ histnum="\\!"
	#   $ echo ${histnum@P}
	#  267132
	#
	#    $ cmdnum=\\#
	#    $ echo ${cmdnum@P}
	#   2
	#
	# TODO: consider adding PWD, OLDPWD, HOSTTYPE, DISPLAY,
	# MACHTYPE, UID, WINDOWID, PPID, USER
	#
	read -r histnum start_time_t command <<< "$(
		HISTTIMEFORMAT="%s "
		history 1
	)"

	if ((BASH42)); then
		printf -v now_time_t "%(%s)T"
		printf -v now_timefmt "%(${HISTTIMEFORMAT% })T" \
			$now_time_t
		printf -v start_timefmt "%(${HISTTIMEFORMAT% })T" \
			$start_time_t
		duration_secs=$((now_time_t - start_time_t))
	else
		now_time_t="$(date +%s)"
		now_timefmt="$(date -d @$now_time_t +$HISTTIMEFORMAT)"
		start_timefmt="$(date -d @$start_time_t +$HISTTIMEFORMAT)"
	fi

	# these are the values that get written for our "extra" logs
	# that have more information than ordinary bash history logs
	#
	local logvals=(
		$HOSTNAME
		$start_timefmt
		$now_timefmt
		$duration_secs
		$TTY_TYPE
		$TTY_NUM
		$SHLVL
		$1 # passed by shell in `$PROMPT_COMMAND': previous
		   # command result code
	)

	LOGLINE="${logvals[*]} $command"
	printf -v LOGBASH "#%u\n%s\n" "$start_time_t" "$command"

	if [[ $LOGCOUNTLAST && $histnum != $LOGCOUNTLAST ]] \
		&& ((${#command})) # TODO where empty coming from? is rare
	then
		# history was incremented, so it's a real command (not
		# the first prompt, a ctrl-c, or empty input), log it
		#
		echo -E "$LOGLINE" >> $LOGFILE_CMDS
		echo -En "$LOGBASH" >> $LOGFILE_BASH

		if ((BASHSQL)) && [ -w $LOGFILE_SQL ]
		then sqlite3 $LOGFILE_SQL <<- % & disown $!
		/*
		 * retry for 3s if another process would block us.  we could
		 * surround by ".mode off" and ".mode list" according to
		 * https://sqlite.org/forum/info/633979ce307f1cc6 but this
		 * does not work in u22 sqlite3 (3.37.2), it was added in
		 * commit 5d88be8f488, first ancestor tag: version-3.38.0
		 * instead we'll output to /dev/null for now.
		 */
		.output /dev/null
		PRAGMA busy_timeout = 3000;
		.output

		BEGIN TRANSACTION;
		INSERT INTO command_lines (
		    hostname, command,
		    start_time_t, end_time_t, duration_secs,
		    ttytype_code_id, ttynum,
		    shlvl, ret
		)
		VALUES (
		    '$HOSTNAME', '${command//\'/\'\'}',
		    $start_time_t, $now_time_t, $duration_secs,
		    ${TTYTYPES[$TTY_TYPE]}, $TTY_NUM,
		    $SHLVL, $1
		);
		COMMIT;
		%
		fi
	fi

	# set previous value for comparison next invocation
	#
	LOGCOUNTLAST=$histnum

	# there's still a small race window where we might lose a WINCH
	# event but at least it won't happen while we write logs, there
	# really should be a way to do 'echo' that lets signals queue
	# though instead of just interrupting the system call
	#
	if ((BASH50 == 0 && dowinch))
	then
		trap WINCH
		kill -WINCH $$
		dowinch=0
		trap dowinch=1 WINCH
	fi

	# useful for printing our position in status line, with tmux
	# status-interval 0, this avoids needing to poll, and happens
	# synchronously too so no need to wait for normal polling lag
	#
	if [[ $TMUX ]]; then
		tmuxpid=${TMUX#*,}
		tmuxpid=${tmuxpid%,*}
		/proc/$tmuxpid/exe refresh-client -S & disown $!
	fi
}
