#
# set up history variables and load in shell history
#
##############################################################################

esetenv LOGBASE		$HOME/var/log

# we log these values in prompt_command(), should be sufficient
# one-time on shell init (don't see them changing)
#
esetenv TTY_TYPE	${TERMINAL/\//}	# for `pts/X' strip off the `/'
esetenv TTY_TYPE	${TERMINAL:0:3}	# `pts' or `tty'
esetenv TTY_NUM		${TERMINAL:3}	# the raw number of the tty
esetenv TTY_NUM		${TTY_NUM#/}	# strip leading `/' if exists (for pts)
declare -xA TTYTYPES=(tty 1 pts 2)

esetenv LOGFILE_BASH	$LOGBASE/history.$HOSTNAME
esetenv LOGFILE_CMDS	$LOGBASE/cmdhist.$HOSTNAME
esetenv LOGFILE_SQL	$LOGFILE_CMDS.sqlite3

# this needs to be set before history -r is done, it describes
# the time format it was written in for the shell history parser
#
esetenv HISTTIMEFORMAT	'%Y%m%d%H%M%S '

# these aren't used anymore because we bypass the shell's own
# logging system (everything is logged via $PROMPT_COMMAND)
# but we still need to set the size to unlimited (empty string)
# and this value is also inherited by HISTFILESIZE (but we want
# to export it, so we do it explicitly here); in both cases
# empty string means unlimited (docs say use negative values,
# but empty string works on older shells)
#
# TODO: this comment makes no sense, if we are using
# prompt_command() to do logging then these will not be used at
# all.	however they may be used when loading history from the
# history file, which we write to in parallel using bash
# histfile syntax bypassing the cmdhist
#
esetenv HISTSIZE	""
esetenv HISTFILESIZE	"$HISTSIZE"
#esetenv HISTCONTROL	"ignorespace"
esetenv HISTCONTROL	""
esetenv HISTIGNORE	"f:f *:"					\
			"m:m *:"					\
			"fg:fg *:"					\
			"gf:gf *:"					\
			"fm:mf:"					\
			"j:"						\
			"taskann *:"					\
			"1:2:3:4:5:6:7:8:9:10:"				\
			"11:12:13:14:15:16:17:18:19:20:"		\
			"21:22:23:24:25:26:27:28:29:30:"		\
			"31:32:33:34:35:36:37:38:39:40:"		\
			"41:42:43:44:45:46:47:48:49:50:"		\
			"51:52:53:54:55:56:57:58:59:60:"		\
			"61:62:63:"					\
			;

# these are still used by the shell to determine where to append
# (-o histappend) or to overwrite (+o histappend) when it exits;
# it then dumps the history contents here. We are doing it ourselves
# right now in $PROMPT_COMMAND so we turn it off completely
#
#export HISTFILE=~/.bash_history
#export HISTFILE=/dev/null
unset HISTFILE

shell_init_history ()
{
	local savedfmt="$HISTTIMEFORMAT"
	HISTTIMEFORMAT=%s
	history -cr $LOGFILE_BASH
	HISTTIMEFORMAT="$savedfmt"

	if type -P sqlite3 &>/dev/null
	then
		BASHSQL=1
		local flags="NOT NULL"
		local int="INTEGER $flags"
		local long="BIGINT $flags"
		local text="TEXT $flags"
	else
		BASHSQL=0
	fi
	export BASHSQL

	if [[ $PS1 ]] && ((BASHSQL)) && ! [ -e $LOGFILE_SQL ]
	then sqlite3 $LOGFILE_SQL <<- %
	BEGIN TRANSACTION;

	CREATE TABLE IF NOT EXISTS tty_type_codes (
	    ttytype_code_id INTEGER PRIMARY KEY,
	    ttytype TEXT UNIQUE NOT NULL
	);
	INSERT OR IGNORE INTO tty_type_codes (ttytype_code_id, ttytype)
	    VALUES (${TTYTYPES[tty]}, 'tty'), (${TTYTYPES[pts]}, 'pts');

	CREATE TABLE IF NOT EXISTS command_lines (
	    command_id INTEGER PRIMARY KEY AUTOINCREMENT,
	    command $text,
	    hostname $text,
	    duration_secs $long,
	    start_time_t $long,
	    end_time_t $long,
	    shlvl $int,
	    ret $int,
	    ttynum $int,
	    ttytype_code_id $int
	        REFERENCES tty_type_codes(ttytype_code_id)
	);

	CREATE VIRTUAL TABLE IF NOT EXISTS command_lines_fts5
	    USING fts5(
	        command,
	        content = command_lines,
	        content_rowid = command_id
	    );

	COMMIT;
	%
	fi
}
