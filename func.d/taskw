#
# taskwarrior
#

# work around always defaulting to 80 columns when piping
# note: ${COLUMNS:-80} not needed, blank value is default (which is 80)
# todo: implement env var expansion in taskwarrior
# also: #991
#
task ()
{
	for arg; do if [[ $arg == '--' ]]; then break
	elif [[ $arg == '--version' ]]
	then `type -P task` --version; return; fi; done

	`type -P task` rc.defaultwidth=$COLUMNS "$@"
}

taskl ()
{
	local taskid=$1; shift
	task $(taskid $taskid) "$@"
}

taskcur ()
{
	local tasknow=($(tasknow))
	local status=${tasknow[1]}
	local name=${tasknow[0]}

	if [[ $status != 'started' ]]; then
		echo "current task $name not engaged, aborting" >&2
		false; return; fi

	task $(taskid $name) "$@"
}

# for taskadd
#
taskaddl () { TASKADD="$*"; } # additional args (such as tags)
taskprj () { TASKPRJ="$@"; } # default project

# look in more fields that have text, default is only description
taskgrepx () { taskgrep_report=export taskgrep "$@" | jq -r .; }
taskgrepp () { taskgrep_report=all taskgrep "$@"; }
taskgrep  ()
{
	local pattern
	local -a patexprs rstpaths noteuuids

	for pattern; do patexprs+=(-e "$pattern"); done
	rstpaths=($(grep -Els "${patexprs[@]}" ~/.task/notes/*.rst))
	if ((${#rstpaths[@]}))
	then noteuuids=($(basename -s .rst ${rstpaths[@]}))
	else noteuuids=()
	fi

	task $(taskids -za -- "$@" ${noteuuids[@]}) ${taskgrep_report:-next}
}

taskgc ()
{
	(($(task +DELETED _unique uuid | wc -l))) &&
		task rc.bulk=0 +DELETED purge
	task rc.gc=on rc.verbose=nothing // list >/dev/null
}

### timewarrior

taskstat ()
{
	local all
	[[ $1 == '-a' || $1 == '--all' ]] && { all=:all; shift; }
	timew summary "$@" :ids $all
}

retimew ()
{
	local -a intervals
	local -A labels
	local op label

	while [[ $1 =~ ^@ ]]; do intervals+=($1); shift; done
	if ! ((${#intervals}))
	then echo "first args should be interval(s)" >&2; false; return; fi

	labels=([untag]=${1:?} [tag]=${2:?})
	for label in ${labels[@]}; do
		if ! taskfql $label &>/dev/null; then
			echo "label $l is bogus" >&2; false; return; fi; done

	for op in untag tag
	do if ! timew $op ${intervals[@]} $(timewtags ${labels[$op]})
	then echo "$op failure" >&2; false; return; fi; done
}
