#

goassoc () 
{
	local lines

	# if we are in the middle of `histoff' we need this
	#
	[[ "$HISTFILE" ]] || source ~/.bash/history

	local newhist="${HISTFILE%/*}/$1${SSH_TTY:+.${HOSTNAME%%.*}}"
	local oldhist="${HISTFILE##*/}${SSH_TTY:+.${HOSTNAME%%.*}}"
	local umask=$(umask)

	# user just wants to know what the current association is
	#
	[[ "$1" ]] || { echo $oldhist; return; }

	# fix bug mentioned in commit message for r584
	#
	umask=0600
	test -f $newhist || touch $newhist
	lines="$(head -3 $newhist | wc -l)"
	((lines < 3)) && printf "%s\n%s\n""%s\n%s\n""%s\n%s\n"		\
				"#1000000001"				\
				"test 1"				\
				"#1000000002"				\
				"test 2"				\
				"#1000000003"				\
				"test 3"				\
				>> $newhist
	umask=$umask

	# some things just want to ensure r584 code has been run
	# and set up the new association.
	#
	if [[ "$2" == noflush ]]; then
		:
	else
		history -a
		history -cr $newhist
	fi
	HISTFILE=$newhist

	GOASSOC=$1

}

goassocnf ()
{
	goassoc $1 noflush
}

goswitcha ()
{
	local +i reason=$1

	goswitch $reason && goassoc $reason
}

gomktofakea ()
{
	local +i reason=$1

	gomktofake $reason && goassoc $reason
}

goswitchlasta ()
{
	# use of "gowhich" should guarantee serialization
	# because of the lock; would use $GOREASON but might
	# that not race? deserves investigation...
	#
	goswitchlast && goassoc $(gowhich)
}

goresetassoc ()
{
	goassoc $(< ~/var/goto/reasons/${TERMINAL#tty})
}
