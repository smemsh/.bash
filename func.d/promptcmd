#
# called by bash via $PROMPT_COMMAND after a command completes
#
# - expects return value of previous command as sole argument
# - logged timestamps will reflect command completion, not start
#
##############################################################################

prompt_command ()
{
	local histnum time_t command file tmuxpid
	local start_timefmt now_timefmt
	local start_time_t start_time_t

	# was getting "bash: echo: write error: Interrupted system call"
	# in the middle of this function because it's run while the
	# terminal window is spawning and they both race to finish, so
	# sometimes the WINCH can be sent right in the middle of our
	# execution and apparently bash does not try to finish the 'echo'
	# after it was interrupted
	#
	# UPDATE: fixed upstream in 5.0, see d233b485e and
	# https://lists.gnu.org/archive/html/bug-bash/2018-01/msg00032.html
	#
	if ((BASH50 == 0)) && ! [[ $dowinch ]]
	then
		dowinch=0
		trap dowinch=1 WINCH
	fi

	# read in last command from in-memory history, for saving on-disk
	# note: must use raw read (with '-r') or '\n' etc will log as 'n'
	# note: $HISTCMD cannot be used to keep track of cancels/dupes
	#   (we keep $histnum instead) because it's not available in the
	#   PROMPT_COMMAND function (it's always set to 1) so we get a
	#   count from the loaded history list, the next one should
	#   increment it
	#
	read -r histnum start_time_t command <<< "$(
		HISTTIMEFORMAT="%s "
		history 1
	)"

	if ((BASH42)); then
		printf -v now_time_t "%(%s)T"
		printf -v now_timefmt "%(${HISTTIMEFORMAT% })T" \
			$now_time_t
		printf -v start_timefmt "%(${HISTTIMEFORMAT% })T" \
			$start_time_t
	else
		now_time_t="$(date +%s)"
		now_timefmt="$(date -d @$now_time_t +$HISTTIMEFORMAT)"
		start_timefmt="$(date -d @$start_time_t +$HISTTIMEFORMAT)"
	fi

	# these are the values that get written for our "extra" logs
	# that have more information than ordinary bash history logs
	#
	local logvals=(
		$HOSTNAME
		$start_timefmt
		$now_timefmt
		$((now_time_t - start_time_t))
		$TTY_TYPE
		$TTY_NUM
		$SHLVL
		$1 # passed by shell in `$PROMPT_COMMAND': previous
		   # command result code
	)

	LOGLINE="${logvals[*]} $command"
	printf -v LOGBASH "#%u\n%s\n" "$start_time_t" "$command"

	if [[ $LOGCOUNTLAST && $histnum != $LOGCOUNTLAST ]]
	then
		# history was incremented, so it's a real command (not
		# the first prompt, a ctrl-c, or empty input), log it
		#
		echo "$LOGLINE" >> $LOGFILE_CMDS
		echo "$LOGBASH" >> $LOGFILE_BASH
	fi

	# set previous value for comparison next invocation
	#
	LOGCOUNTLAST=$histnum

	# there's still a small race window where we might lose a WINCH
	# event but at least it won't happen while we write logs, there
	# really should be a way to do 'echo' that lets signals queue
	# though instead of just interrupting the system call
	#
	if ((BASH50 == 0 && dowinch))
	then
		trap WINCH
		kill -WINCH $$
		dowinch=0
		trap dowinch=1 WINCH
	fi

	# useful for printing our position in status line, with tmux
	# status-interval 0, this avoids needing to poll, and happens
	# synchronously too so no need to wait for normal polling lag
	#
	if [[ $TMUX ]]; then
		tmuxpid=${TMUX#*,}
		tmuxpid=${tmuxpid%,*}
		/proc/$tmuxpid/exe refresh-client -S
	fi
}
